---
- name: Get k3s installed version
  ansible.builtin.shell: |
    k3s --version
  register: k3s_version_output
  changed_when: false
  check_mode: false

- name: Show k3s version
  ansible.builtin.debug:
    msg: "k3s version: {{ k3s_version_output.stdout }}"

- name: Set k3s installed version
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"
  check_mode: false

- name : Get k3s latest version
  ansible.builtin.shell: |
    curl -s https://api.github.com/repos/k3s-io/k3s/releases/latest | grep tag_name | cut -d '"' -f 4
  register: latest_k3s_version_output
  changed_when: false
  check_mode: false

- name: Show k3s latest version
  ansible.builtin.debug:
    msg: "k3s latest version: {{ latest_k3s_version_output.stdout }}"

- name: Set k3s latest version
  ansible.builtin.set_fact:
    latest_k3s_version: "{{ latest_k3s_version_output.stdout }}"

- name: Check if k3s needs to be upgraded
  ansible.builtin.set_fact:
    k3s_upgrade_needed: "{{ installed_k3s_version < latest_k3s_version }}"
  check_mode: false


- name: Ask for confirmation before upgrading k3s
  ansible.builtin.pause:
    prompt: "k3s is currently at version {{ installed_k3s_version }}. The latest version is {{ latest_k3s_version }}. Do you want to upgrade? (yes/no)"
  when: k3s_upgrade_needed
  register: confirmation
  check_mode: false
  delegate_to: localhost

- name: Check user confirmation
  ansible.builtin.debug:
    msg: "Skipping upgrade for {{ inventory_hostname }} - user declined."
  when: confirmation.user_input is not defined or confirmation.user_input | lower != 'yes'

- name: Show confirmation message
  ansible.builtin.debug:
    msg: "User confirmed, proceeding with k3s upgrade on {{ inventory_hostname }}." 
  when: confirmation.user_input is defined and confirmation.user_input | lower == 'yes'

- name: Update
  block:
    - name: Find K3s service files
      ansible.builtin.find:
        paths: "{{ systemd_dir }}"
        patterns: "k3s*.service*"
      register: k3s_service_files

    - name: Show K3s service files
      ansible.builtin.debug:
        var: k3s_service_files

    - name: Save current K3s service
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path }}.bak"
        remote_src: true
        mode: preserve
        force: true
      loop: "{{ k3s_service_files.files }}"

    - name: Install new K3s Version [server]
      when: "'servers' in group_names"
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ latest_k3s_version }}"
      changed_when: true

    - name: Install new K3s Version [agent]
      when: "'agents' in group_names"
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ latest_k3s_version }}"
        INSTALL_K3S_EXEC: "agent"
      changed_when: true

    - name: Restore K3s service
      ansible.builtin.copy:
        src: "{{ item.path }}.bak"
        dest: "{{ item.path }}"
        remote_src: true
        mode: preserve
        force: true
      loop: "{{ k3s_service_files.files }}"

    - name: Clean up temporary K3s service backups
      ansible.builtin.file:
        path: "{{ item.path }}.bak"
        state: absent
      loop: "{{ k3s_service_files.files }}"

    - name: Restart K3s service [server]
      when: "'servers' in group_names"
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: k3s

    - name: Restart K3s service [agent]
      when: "'agents' in group_names"
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: k3s-agent
  when: 
    - k3s_upgrade_needed
    - confirmation.user_input is defined 
    - confirmation.user_input | lower == 'yes'